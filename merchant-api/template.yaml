################################################
# Template for merchant-api with AppSync
################################################

AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

################################################
# Parameters
################################################
Parameters:
  Application:
    Type: String
  Module:
    Type: String
  Environment:
    Type: String
    Default: dev2
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 1
    Description: CloudWatch Logs retention period for Lambda functions
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus Name
  NodeLayerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Node Layer NodeDependenciesLayer ARN
  ElasticSearchDomainEndpoint:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Elastic Search Endpoint
  QueryLimit:
    Type: Number
    Default: 20
    Description: Maximum number of items to return from a single query
  MerchantpoolId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Merchant userpool id
  OrderEventBus:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Name of the order event bus
################################################
# Globals
################################################
Globals:
  Function:
    Runtime: nodejs16.x
    Handler: index.handler
    Layers:
      - !Ref NodeLayerArn
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        EVENT_BUS_NAME: !Ref EventBusName
        POWERTOOLS_SERVICE_NAME: users
        POWERTOOLS_TRACE_DISABLED: "false"
        LOG_LEVEL: !Ref LogLevel
################################################
# Resources
################################################
Resources:
  ##################################
  # GRAPHQL API                    #
  ##################################
  MerchantApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${Application}-${Environment}-${Module}-merchantapi
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        # AppIdClientRegex: !Sub "ecommerce-${Environment}-frontend-api.*"
        AwsRegion: !Ref AWS::Region
        # UserPoolId: !Sub '{{resolve:ssm:/${Application}/${Environment}/platform/merchantuserpool/id}}'
        UserPoolId: !Ref MerchantpoolId
        DefaultAction: ALLOW
      AdditionalAuthenticationProviders:
        - AuthenticationType: API_KEY

      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt ApiLoggingRole.Arn
        FieldLogLevel: ALL
      XrayEnabled: true

  MerchantApiClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${Application}-${Environment}-${Module}-merchantapi-client
      UserPoolId: !Ref MerchantpoolId
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - http://localhost:3000
        - https://oauth.pstmn.io/v1/callback
      GenerateSecret: false
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      RefreshTokenValidity: 30

  MerchantUserPoolClientParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Application}/${Environment}/${Module}/merchantuserpoolclient/id
      Type: String
      Value: !Ref MerchantApiClient
      Tags:
        Environment: !Ref Environment
        Application: !Ref Application
        Module: !Ref Module

  ApiLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/appsync/apis/${MerchantApi.ApiId}"
      RetentionInDays: !Ref RetentionInDays

  ApiArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Application}/${Environment}/${Module}/merchantapi/arn
      Type: String
      Value: !GetAtt MerchantApi.Arn

  ApiIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Application}/${Environment}/${Module}/merchantapi/id
      Type: String
      Value: !GetAtt MerchantApi.ApiId

  ApiUrlParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${Application}/${Environment}/${Module}/merchantapi/url
      Type: String
      Value: !GetAtt MerchantApi.GraphQLUrl

  MerchantApiKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt MerchantApi.ApiId

  Schema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt MerchantApi.ApiId
      DefinitionS3Location: "resources/schema.graphql"

  ##############################################################
  # Data Source for ElasticSearch Will be used by all Search resolvers
  ##############################################################
  ElasticSearchDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt MerchantApi.ApiId
      Name: ElasticSearchDomain
      Type: AMAZON_ELASTICSEARCH
      ServiceRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${Application}-${Environment}-ES-Role
      ElasticsearchConfig:
        AwsRegion: !Sub ${AWS::Region}
        Endpoint: !Ref ElasticSearchDomainEndpoint

  ##############################################################
  # API Destinations and other dependencies for event bridge
  ##############################################################
  ApiDestination:
    Type: AWS::Events::ApiDestination
    Properties:
      ConnectionArn: !GetAtt ApiDestinationConnection.Arn
      HttpMethod: POST
      InvocationEndpoint: !GetAtt MerchantApi.GraphQLUrl

  ApiDestinationConnection:
    Type: AWS::Events::Connection
    Properties:
      AuthorizationType: API_KEY
      AuthParameters:
        ApiKeyAuthParameters:
          ApiKeyName: x-api-key
          ApiKeyValue: !GetAtt MerchantApiKey.ApiKey

  EventBridgeRole: ## Service role to invoke Api Destination
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: eventbridge-invoke-api-destination
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:InvokeApiDestination
                Resource:
                  - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:api-destination/${ApiDestination}/*"

  RouteToAppSyncRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Ref OrderEventBus
      EventPattern:
        source:
          - !Sub ${Application}-${Environment}-ManageOrder-Function
        detail-type:
          - Order Status Update
      Targets:
        - Id: appsync-order-update
          Arn: !GetAtt ApiDestination.Arn
          RoleArn: !GetAtt EventBridgeRole.Arn
          InputTransformer:
            InputPathsMap:
              assignedStoreId: "$.detail.input.assignedStoreId"
              assignedStoreName: "$.detail.input.assignedStoreName"
              createdAt: "$.detail.input.createdAt"
              deliveryType: "$.detail.input.deliveryType"
              id: "$.detail.input.id"
              orderId: "$.detail.input.orderId"
              shipmentStatus: "$.detail.input.shipmentStatus"
              subTotalProductAmount: "$.detail.input.subTotalProductAmount"
            InputTemplate: |
              {
                "query": "mutation addOrderShipment($input: CreateOrderShipmentInput!) {addOrderShipment(input: $input) {id deliveryType subTotalProductAmount orderId assignedStoreId assignedStoreName shipmentStatus createdAt}}",
                "operationName": "addOrderShipment",
                "variables": {
                  "input": {
                    "id": "<id>",
                    "deliveryType": "<deliveryType>",
                    "subTotalProductAmount": <subTotalProductAmount>,
                    "orderId": "<orderId>",
                    "assignedStoreId": "<assignedStoreId>",
                    "assignedStoreName": "<assignedStoreName>",
                    "shipmentStatus": "<shipmentStatus>",
                    "createdAt": "<createdAt>"
                  }
                }
              }

  ##############################################################
  # Lambda Destinations and other dependencies for event bridge
  ##############################################################
  # LambdaDestinationConnection:
  #   Type: AWS::Events::Connection
  #   Properties:
  #     AuthorizationType: API_KEY
  #     AuthParameters:
  #       ApiKeyAuthParameters:
  #         ApiKeyName: x-api-key
  #         ApiKeyValue: !GetAtt MerchantApiKey.ApiKey

  # LambdaDestination:
  #   Type: AWS::Events::LambdaDestination
  #   Properties:
  #     ConnectionArn: !GetAtt LambdaDestinationConnection.Arn
  #     HttpMethod: POST
  #     InvocationEndpoint: !GetAtt MerchantApi.GraphQLUrl

  # EventBridgeRole: ## Service role to invoke Lambda Destination
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: events.amazonaws.com
  #           Action: "sts:AssumeRole"
  #     Path: /
  #     Policies:
  #       - PolicyName: eventbridge-invoke-lambda-destination
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: Allow
  #               Action: lambda:InvokeFunction
  #               Resource:
  #                 - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}-ManageOrderNotification-Function"
  # RouteToLambdaRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     EventBusName: !Ref OrderEventBus
  #     EventPattern:
  #       source:
  #         - !Sub ${Application}-${Environment}-ManageOrder-Function
  #       detail-type:
  #         - Order Status Update
  #     Targets:
  #       - Id: appsync-order-update
  #         Arn:
  #           - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}-ManageOrderNotification-Function"
  #         RoleArn: !GetAtt EventBridgeRole.Arn
