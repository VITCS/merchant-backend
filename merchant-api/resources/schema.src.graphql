"""
Describes the user that can login to Merchant Portal.
User Credentials are managed by Cognito.
"""
type MerchantUser
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @key(fields: ["userId"])
  @key(name: "byEmail", fields: ["email"], queryField: "merchantUserByEmail")
  @key(
    name: "byPhoneNumber"
    fields: ["phoneNumber"]
    queryField: "merchantUserByPhoneNumber"
  ) {
  # User Id is same as Cognito's UserName
  userId: ID!
  # Full name of the User
  firstName: String!
  middleName: String
  lastName: String!
  # Email of the User.  Should be a valid Email
  email: AWSEmail!
  phoneNumber: String!
  # Merchant Id to which the user owns.
  # It is Mandatory if the user is he Owner of an Account.
  merchantAccountId: ID
  merchantAccount: MerchantAccount @connection(fields: ["merchantAccountId"])
  userRole: userRole
  stores: [MerchantUserStore]! @connection(name: "MerchantUserTableJoin")
  storeCount: Int
}

"""
Address is type only.
Address type will be embedded in each of the entities as required.
"""
type Address {
  addrLine1: String!
  addrLine2: String
  addrLine3: String
  city: String!
  state: String
  country: String!
  postCode: String
  latitude: Float
  longitude: Float
}
enum MerchantAccountStatus {
  NEW
  SUBMITTED
  APPROVED
  ACTIVE
  DISABLED
  ONHOLD
}

"""
Describes the creation of merchant account
Only Admin i.e m_admin has the privilege to create merchant account.
"""
type MerchantAccount
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @key(
    name: "byAccountStatus"
    fields: ["accountStatus"]
    queryField: "merchantAccountByAccountStatus"
  ) {
  id: ID!
  companyName: String!
  contactName: String!
  contactPhoneNumber: String!
  contactEmail: AWSEmail!
  billingAddress: Address
  accountStatus: MerchantAccountStatus!
  accountStatusReason: String
  approvedAt: AWSDateTime
  approvedBy: String
  merchantProfile: MerchantProfile
  Stores: [Store] @connection(keyName: "byMerchantAccount", fields: ["id"])
  ownerId: ID
  Owner: [MerchantUser] @connection(fields: ["ownerId"])
}

enum StoreStatus {
  NEW
  PENDING
  ACTIVE
  DISABLED
  ONHOLD
}

"""
Describes the creation of store
Only Admin i.e m_admin has the privilege to create store and add users to the store.
"""
type Store
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @key(
    name: "byMerchantAccount"
    fields: ["merchantAccountId"]
    queryField: "storeByMerchantAccountId"
  )
  @key(name: "byStatus", fields: ["storeStatus"], queryField: "StoreByStatus")
  @searchable {
  id: ID
  storeNumber: String
  storeName: String!
  address: Address
  merchantAccountId: ID!
  merchantAccount: MerchantAccount @connection(fields: ["merchantAccountId"])
  storeStatus: StoreStatus!
  statusReason: String
  statusUpdatedAt: AWSDateTime
  statusUpdatedBy: String
  storePhotos: [String]
  storePhoneNumber: String!
  storeEmail: String
  businessHours: servingHours
  deliveryHours: servingHours
  storeClosing: Int
  orderFulfilling: [OrderFulfilling]
  deliveryScope: DeliveryScope
  giftWrapping: GiftWrapping
  carriersAllowed: [String]
  specialProdCat: [String]
  # YYYY-MM-DD
  holidays: [AWSDate]
  user: [MerchantUserStore]! @connection(name: "StoreTableJoin")
  userCount: Int
}

type servingHours {
  Mon: [String]
  Tue: [String]
  Wed: [String]
  Thu: [String]
  Fri: [String]
  Sat: [String]
  Sun: [String]
}

enum userRole {
  Merchant_Super_user
  Merchant_Admin
  Merchant_Manager
  Store_Cashier
  Store_Driver
  Store_Manager
  Store_Assistant
}

"""
Describes the creation of store payments
Only Admin i.e m_admin has the privilege to create store payments type.
"""
type StorePayments
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @key(
    name: "byMerchantAccount"
    fields: ["merchantAccountId"]
    queryField: "storePaymentsByMerchantAccountId"
  ) {
  id: ID!
  merchantAccountId: ID!
  merchantAccount: MerchantAccount @connection(fields: ["merchantAccountId"])
  storeId: ID
  paymentGateway: PaymentGateway
  paymentOptions: PaymentOptions
  merPaymentAccDetails: String
}

enum PaymentGateway {
  Briantree
}
enum PaymentOptions {
  Credit_Card
  Briantree
  Auth
}
type OrderFulfilling {
  pickUp: [PickUp]
  delivery: [Delivery]
  gifting: Gifting
}

type DeliveryScope {
  serviceArea: Int
  MinOrderSize: Int
  deliveryType: [DeliveryType]
}

enum PickUp {
  In_Store
  Curb_Side
}

enum Delivery {
  Delivery_Local
  Shipping_In_State
  Shipping_Out_Of_State
}

enum Gifting {
  Personal
  Business
}

type CarriersAllowed {
  carriers: [String]
}

enum GiftWrapping {
  Free
  Fee
}

enum DeliveryType {
  Own_Driver
  Delivery_Partner
  Both
}

"""
Describes the relationship between users to store and store to users as a join table.
"""
type MerchantUserStore
  @model
  @aws_api_key
  @aws_cognito_user_pools
  @key(
    name: "byMerchantAccount"
    fields: ["merchantAccountId"]
    queryField: "merchantUserStoreByMerchantAccountId"
  )
  @key(
    name: "byUser"
    fields: ["userId"]
    queryField: "merchantUserStoreByUserId"
  ) {
  id: ID!
  userId: ID!
  merchantUser: MerchantUser @connection(name: "MerchantUserTableJoin")
  merchantAccountId: ID!
  merchantAccount: MerchantAccount @connection(fields: ["merchantAccountId"])
  store: Store! @connection(name: "StoreTableJoin")
}

# In merchant account
type MerchantProfile @model @aws_api_key @aws_cognito_user_pools {
  id: ID!
  entityName: String!
  feinNumber: Int!
  email: AWSEmail!
  address: Address
  accountDetails: AccountDetails
}

type AccountDetails {
  midNumber: String!
  bankName: String!
  routingNumber: String!
  accountNumber: String!
}
