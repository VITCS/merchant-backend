################################################
# Parameters
################################################
Parameters:
  Application:
    Type: String
  Module:
    Type: String
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 1
    Description: CloudWatch Logs retention period for Lambda functions
  EventBusName:
    Type: AWS::SSM::Parameter::Value<String>
    Description: EventBridge Event Bus Name
  NodeLayerArn:
    Type: AWS::SSM::Parameter::Value<String>
    Description: Node Layer NodeDependenciesLayer ARN
  QueryLimit:
    Type: Number
    Default: 20
    Description: Maximum number of items to return from a single query
  ApiId:
    Type: AWS::SSM::Parameter::Value<String>
    Description: API Id
  SearchItem:
    Type: String
    Description: Search Item i.e. Table to search
    Default: ${Appplication}-${Environment}-Order
##############################################################
# Data Sources for Order Shipment
##############################################################
Resources:
  ##########################
  # Roles #
  ##########################
  ManageOrderShipmentFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ManageOrderShipmentFunctionRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}-ManageOrderShipment-Function

  ##########################
  # Manage Order #
  ##########################
  ManageOrderShipmentDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: ManageOrderShipment
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt ManageOrderShipmentFunctionRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Application}-${Environment}-ManageOrderShipment-Function

  CreateOrderShipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt ManageOrderShipmentDataSource.Name
      FieldName: createOrderShipment
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "createOrderShipment",
            "body": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  UpdateOrderShipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt ManageOrderShipmentDataSource.Name
      FieldName: updateOrderShipment
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "updateOrderShipment",
            "body": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  DeleteOrderShipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt ManageOrderShipmentDataSource.Name
      FieldName: deleteOrderShipment
      TypeName: Mutation
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "Invoke",
          "payload": {
            "field": "deleteOrderShipment",
            "body": $util.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: |
        $utils.toJson($ctx.result)

  # AddOrderResolver:
  #   Type: AWS::AppSync::Resolver
  #   Properties:
  #     ApiId: !Ref ApiId
  #     DataSourceName: !GetAtt NoneDataSource.Name
  #     FieldName: addOrder
  #     TypeName: Mutation
  #     RequestMappingTemplate: |
  #       {
  #         "version": "2018-05-29",
  #         "payload": $util.toJson($context.arguments)
  #       }
  #     ResponseMappingTemplate: |
  #       $utils.toJson($ctx.result.input)

  ########################
  # Get Order  #
  ########################
  GetOrderShipmentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetOrderShipmentTableAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:GetItem
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-OrderShipment"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-OrderShipment/index/byAssignedStoreId"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-OrderShipment/index/byAssignedStoreIdCreatedAt"

              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-Order/index/category"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-Order/index/byEmail"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Application}-${Environment}-Order/index/byPhoneNumber"

  OrderShipmentTableDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !Ref ApiId
      Name: OrderShipmentTable
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt GetOrderShipmentRole.Arn
      DynamoDBConfig:
        AwsRegion: !Ref AWS::Region
        TableName: !Sub ${Application}-${Environment}-OrderShipment

  listOrderShipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt OrderShipmentTableDataSource.Name
      FieldName: listOrderShipments
      TypeName: Query
      RequestMappingTemplate: |
        #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
        #set( $ListRequest = {
          "version": "2018-05-29",
          "limit": $limit
        } )
        #if( $context.args.nextToken )
          #set( $ListRequest.nextToken = $context.args.nextToken )
        #end
        #if( $context.args.filter )
          #set( $ListRequest.filter = $util.parseJson("$util.transform.toDynamoDBFilterExpression($ctx.args.filter)") )
        #end
        #if( !$util.isNull($modelQueryExpression)
                                && !$util.isNullOrEmpty($modelQueryExpression.expression) )
          $util.qr($ListRequest.put("operation", "Query"))
          $util.qr($ListRequest.put("query", $modelQueryExpression))
          #if( !$util.isNull($ctx.args.sortDirection) && $ctx.args.sortDirection == "DESC" )
            #set( $ListRequest.scanIndexForward = false )
          #else
            #set( $ListRequest.scanIndexForward = true )
          #end
        #else
          $util.qr($ListRequest.put("operation", "Scan"))
        #end
        $util.toJson($ListRequest)
      ResponseMappingTemplate: |
        #if( $ctx.error )
        $util.error($ctx.error.message, $ctx.error.type)
        #else
        $util.toJson($ctx.result)
        #end

  GetOrderShipmentResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt OrderShipmentTableDataSource.Name
      FieldName: getOrderShipment
      TypeName: Query
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "GetItem",
          "key": #if( $modelObjectKey ) $util.toJson($modelObjectKey) #else {
          "id": $util.dynamodb.toDynamoDBJson($ctx.args.id)
        } #end
        }
      ResponseMappingTemplate: |
        #if( $ctx.error )
        $util.error($ctx.error.message, $ctx.error.type)
        #else
        $util.toJson($ctx.result)
        #end

  ListOrderShipmentByStoreIdResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      DataSourceName: !GetAtt OrderShipmentTableDataSource.Name
      FieldName: listOrderShipmentByStoreId
      TypeName: Query
      RequestMappingTemplate: |
        #set( $todayString = $util.time.nowISO8601() )
        {
          "version" : "2017-02-28",
          "operation" : "Query",
          "query" : {
              ## Provide a query expression. **
              "expression": "assignedStoreId = :assignedStoreId AND createdAt <= :createdAt",
              "expressionValues" : {
                  ":assignedStoreId" : $util.dynamodb.toDynamoDBJson($ctx.args.storeId),
                  ":createdAt" : $util.dynamodb.toDynamoDBJson($todayString)
              }
          },
          "index": "byAssignedStoreIdCreatedAt",
          #if($context.args.filter) "filter": $util.transform.toDynamoDBFilterExpression($ctx.args.filter), #end
          #if($context.args.nextToken) "nextToken": "$context.args.nextToken", #end
          "limit": $util.defaultIfNull($context.args.limit, 20),
          "select": "ALL_ATTRIBUTES"
        }
      ResponseMappingTemplate: |
        #if( $ctx.error )
        $util.error($ctx.error.message, $ctx.error.type)
        #else
        $util.toJson($ctx.result)
        #end
