version: 0.2
env:
  git-credential-helper: yes
phases:
  install:
    runtime-versions:
      nodejs: 16
    commands:
      # Install packages or any pre-reqs in this phase.
      # Upgrading SAM CLI to latest version
      - pip3 install --upgrade aws-sam-cli
      - pip3 install --force-reinstall "cryptography==38.0.4"
      - sam --version
      # Setting up the Temporary Role
      - TEMP_ROLE=$(aws sts assume-role --role-arn $ASSUME_ROLE_ARN --role-session-name prodplatform)
      - export TEMP_ROLE
      - export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.AccessKeyId')
      - export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SecretAccessKey')
      - export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r '.Credentials.SessionToken')

  pre_build:
    commands:
      # Run tests, lint scripts or any other pre-build checks.
      #- npm run test

  build:
    commands:
      # Use Build phase to build your artifacts (compile, etc.)
      - cd Store && sam build -t template.yaml
      - cd ../Store && sam build -t templateFunctions.yaml
      - cd ../StorePayments && sam build -t template.yaml
      - cd ../StorePayments && sam build -t templateFunctions.yaml
      - cd ../merchantaccount && sam build -t template.yaml
      - cd ../merchantaccount && sam build -t templateFunctions.yaml
      - cd ../MerchantUser && sam build -t template.yaml
      - cd ../MerchantUser && sam build -t templateFunctions.yaml
      - cd ../MerchantUserStore && sam build -t template.yaml
      - cd ../MerchantUserStore && sam build -t templateFunctions.yaml
      - cd ../SearchProducts && sam build -t template.yaml
      - cd ../merchant-api && sam build -t template.yaml
      - cd datasources
      - cd MerchantUser && sam build -t MerchantUser.yaml
      - cd ../MerchantAccount && sam build -t MerchantAccount.yaml
      - cd ../Store && sam build -t Store.yaml
      - cd ../MerchantUserStore && sam build -t MerchantUserStore.yaml
      - cd ../StorePayments && sam build -t StorePayments.yaml
      - cd ../Order && sam build -t Order.yaml
      - cd ../OrderShipment && sam build -t OrderShipment.yaml
      - cd ../Group && sam build -t Group.yaml
      # Now Build Dependencies
      - cd ../MerchantUser && sam build -t MerchantUser_dep.yaml
      - cd ../MerchantAccount && sam build -t MerchantAccount_dep.yaml
      - cd ../MerchantUserStore && sam build -t MerchantUserStore_dep.yaml
      - cd ../Store && sam build -t Store_dep.yaml
      - cd ../StorePayments && sam build -t StorePayments_dep.yaml
      - cd ../SearchProducts && sam build -t SearchProducts.yaml
      - cd ../Group && sam build -t Group_dep.yaml
      - cd ../..
      - cd ..

  post_build:
    commands:
      - echo ${Environment}
      # Use Post-Build for notifications, git tags, upload artifacts to S3
      - export DEPLOY_PARMS=" --s3-bucket ${DEPLOY_BUCKET} --region ${DEPLOY_REGION} --no-confirm-changeset --no-fail-on-empty-changeset"
      - echo $DEPLOY_PARMS
      - cd Store && sam deploy -t template.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../Store && sam deploy -t templateFunctions.yaml --config-env ${env}Dep $DEPLOY_PARMS
      - cd ../StorePayments && sam deploy -t template.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../StorePayments && sam deploy -t templateFunctions.yaml  --config-env ${env}Dep $DEPLOY_PARMS
      - cd ../merchantaccount && sam deploy -t template.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../MerchantUser && sam deploy -t template.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../MerchantUserStore && sam deploy -t template.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../merchant-api && sam deploy -t template.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../merchantaccount && sam deploy -t templateFunctions.yaml --config-env ${env}Dep $DEPLOY_PARMS
      - cd ../MerchantUser && sam deploy -t templateFunctions.yaml --config-env ${env}Dep $DEPLOY_PARMS
      - cd ../MerchantUserStore && sam deploy -t templateFunctions.yaml --config-env ${env}Dep $DEPLOY_PARMS
      - cd ../Group && sam deploy -t template.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../Group && sam deploy -t templateFunctions.yaml --config-env ${env}Dep $DEPLOY_PARMS
      - cd ../SearchProducts && sam deploy -t template.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../merchant-api
      - cd datasources/MerchantUser
      - cd ../MerchantUser && sam deploy -t MerchantUser.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../MerchantAccount && sam deploy -t MerchantAccount.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../Store && sam deploy -t Store.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../MerchantUserStore && sam deploy -t MerchantUserStore.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../StorePayments && sam deploy -t StorePayments.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../Order && sam deploy -t Order.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../OrderShipment && sam deploy -t OrderShipment.yaml --config-env ${env} $DEPLOY_PARMS
      - cd ../Group && sam deploy -t Group.yaml --config-env ${env} $DEPLOY_PARMS
      # Now Deploy Dependencies
      - cd ../MerchantUser && sam deploy -t MerchantUser_dep.yaml --config-env ${env}dep $DEPLOY_PARMS
      - cd ../MerchantAccount && sam deploy -t MerchantAccount_dep.yaml --config-env ${env}dep $DEPLOY_PARMS
      - cd ../MerchantUserStore && sam deploy -t MerchantUserStore_dep.yaml --config-env ${env}dep $DEPLOY_PARMS
      - cd ../Store && sam deploy -t Store_dep.yaml --config-env ${env}dep $DEPLOY_PARMS
      - cd ../StorePayments && sam deploy -t StorePayments_dep.yaml --config-env ${env}dep $DEPLOY_PARMS
      - cd ../Group && sam deploy -t Group_dep.yaml --config-env ${env}dep $DEPLOY_PARMS
      - cd ../SearchProducts && sam deploy -t SearchProducts.yaml --config-env ${env} $DEPLOY_PARMS

      - cd ../..

      #  Backup the Repository
      - ls -ltr
      - unset AWS_ACCESS_KEY_ID
      - unset AWS_SECRET_ACCESS_KEY
      - unset AWS_SESSION_TOKEN
      - git config --global --unset-all credential.helper
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      - git clone --mirror https://git-codecommit.us-east-1.amazonaws.com/v1/repos/${REPO_NAME} LocalRepository
      - cd LocalRepository
      - git remote set-url --push origin https://git-codecommit.${BACKUP_REPO_REGION}.amazonaws.com/v1/repos/${REPO_NAME}
      - git config --global credential.helper '!aws codecommit credential-helper $@'
      - git config --global credential.UseHttpPath true
      - git fetch -p origin
      - git push --mirror
      - cd ..
      - rm -rf  LocalRepository
